// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////////////////////////////////////////////////////////////
GuildHall9 is GuildHall

constants:

   MAINDOOR = 1
   SECRETDOOR = 2
   
   DOOR_DELAY = 5000
       
   include blakston.khd

resources:

   include guildh9.lkod

   room_name_guildh9 = "The Abandoned Warehouse"
   room_guildh9 = guildh9.roo

classvars:

   vrName = room_name_guildh9

   viTeleport_row = 9
   viTeleport_col = 19

   viNews_row = 25
   viNews_col = 24
   viNews_finerow = 32
   viNews_finecol = 32

   viFoyer_north = 5
   viFoyer_south = 11
   viFoyer_west = 15
   viFoyer_east = 24

   viLever_row = 16
   viLever_col = 10
   viLever_fine_row = 32
   viLever_fine_col = 32

   viInner_teleport_row = 24
   viInner_teleport_col = 17

   viQuality = 1
   viTerrain_type = TERRAIN_CITY | TERRAIN_GUILDHALL

   viSeconds_til_close = 7

properties:

   prRoom = room_guildh9
   piRoom_num = RID_GUILDH9

   piBaseLight = LIGHT_NICE
   piOutside_factor = OUTDOORS_5

   ptSecret = $
   ptEntrance = $

messages:

   Constructor()
   {
      plGuild_doors = [ [11,19] ];

      // This is a box containing the guild door, used
      // for removing players from it when it closes.
      plEntrance = [ 1175, 1225, 1900, 2000 ];

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      /// TO TOWN
      plExits = Cons([ 9, 24, RID_BAR_PORT, 38, 6, ROTATE_NONE ],plExits);
      plExits = Cons([ 10, 24, RID_BAR_PORT, 38, 6, ROTATE_NONE ],plExits);

      propagate;
   }

   Delete()
   {
      if ptSecret <> $
      {
         DeleteTimer(ptSecret);
         ptSecret = $;
      }

      if ptEntrance <> $
      {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }

      propagate;
   }

   SomethingTryGo(what=$, row=$, col = $)
   {
      if row = 12 AND col = 19
      {
         Send(self,@OpenEntrancedoor);

         return TRUE;
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=MAINDOOR,#animation=ANIMATE_FLOOR_LIFT,
               #height=128,#speed=100);
         Send(self,@OpenEntranceDoorSound);
         ptEntrance = CreateTimer(self,@CloseEntranceDoor,DOOR_DELAY);
      }

      return;
   }

   CloseEntranceDoor()
   {
      Send(self,@SetSector,#sector=MAINDOOR,#animation=ANIMATE_FLOOR_LIFT,
            #height=224,#speed=50);
      Send(self,@CloseEntranceDoorSound);

      // We now propagate this to handle removing players from the door,
      // and so the door can still be entered while it is closing.
      propagate;
   }

   OpenSecretDoor()
   {
      if ptSecret = $
      {
         Send(self,@SetSector,#sector=SECRETDOOR,#animation=ANIMATE_FLOOR_LIFT,
               #height=128,#speed=100);
         Send(self,@OpenSecretDoorSound);
         ptSecret = CreateTimer(self,@CloseSecretDoor,DOOR_DELAY);
      }

      return;
   }

   CloseSecretDoor()
   {
      ptSecret = $;
      Send(self,@SetSector,#sector=SECRETDOOR,#animation=ANIMATE_FLOOR_LIFT,
            #height=224,#speed=100);
      Send(self,@CloseSecretDoorSound);

      return;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&WoodenBox),
            #new_row=6,#new_col=5,#fine_col=24,#new_angle=ANGLE_SOUTH_EAST);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=8,#new_col=5,#fine_col=24,#new_angle=ANGLE_SOUTH_EAST);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=10,#new_col=5,#fine_col=24,#new_angle=ANGLE_SOUTH_EAST);

      Send(self,@NewHold,#what=Create(&SpinningWheel),
           #new_row=12,#new_col=5);
      Send(self,@NewHold,#what=Create(&Loom),
           #new_row=14,#new_col=5);
      Send(self,@NewHold,#what=Create(&Forge),
           #new_row=16,#new_col=5);
      Send(self,@NewHold,#what=Create(&KocatanForge),
           #new_row=18,#new_col=5);
      Send(self,@NewHold,#what=Create(&CraftingAnvil),
           #new_row=20,#new_col=5);
      Send(self,@NewHold,#what=Create(&KocatanSplittingStump),
           #new_row=22,#new_col=5);
      Send(self,@NewHold,#what=Create(&GoadsAnvil),
           #new_row=25,#new_col=5);
      Send(self,@NewHold,#what=Create(&KocatanAnvil),
           #new_row=25,#new_col=7,#new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&ShaveHorse),
           #new_row=25,#new_col=9,#new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&TanningRack),
           #new_row=25,#new_col=11,#new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&KocatanTanningRack),
           #new_row=25,#new_col=13,#new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&SplittingStump),
           #new_row=25,#new_col=15,#new_angle=ANGLE_NORTH);

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
