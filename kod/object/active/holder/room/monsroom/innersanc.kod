// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////////////////////////////////////////////////////////////////
InnerSanctum is MonsterRoom

constants:

   ENTRANCE_SECTOR = 2
   ENTRANCE_H_DN = 10
   ENTRANCE_H_UP = 200
   
   LIFT_DELAY = 13000

   LEVER_REACTIVATE_DELAY = 2000    // 2 seconds
       
   include blakston.khd

resources:

   include innersanc.lkod

   room_name_guildh15 = "Inner Sanctum of Queen Venya'cyr"
   room_guildh15 = guildh15.roo

   Guildh15_lever_desc = \
      "This lever is clearly of archaic design, yet it seems to be in "
      "pristine condition.  You can't help but wonder what it controls."
   Guildh15_lever_icon = neclever.bgf

   InnerSanctum_loop = necloop3.ogg
   InnerSanctum_music = nec03.ogg

   guildh15_guildwarning = \
      "Your amulet vibrates vigorously for a moment.  Something is amiss."

classvars:

   vrName = room_name_guildh15

   viTeleport_row = 13
   viTeleport_col = 14

   viTerrain_type = TERRAIN_NECROPOLIS | TERRAIN_LAIR

properties:

   prMusic = InnerSanctum_music

   prRoom = room_guildh15
   piRoom_num = RID_INNERSAN

   piBaseLight = LIGHT_NICE

   ptEntrance = $

   plLevers = $
   ptReactivateLevers = $
   plGuild_doors = $
   plEntrance = $

   piGen_time = 10000

   piInit_count_min = 4
   piInit_count_max = 20

   piMonster_count_max = 10

messages:

   Constructor()
   {
      Send(self,@OpenEntranceDoor);

      plGuild_doors = [[12,30],[13,30],[14,30]];
      plLooping_sounds = [[ InnerSanctum_loop, 0, 0, 200, 100 ]];
      
      plMonsters = [ [&DarkAngel, 100] ];

      plGenerators = [ [13, 14], [13, 33], [13, 42], [7, 43], [18, 44],
                       [10, 49], [16, 48], [13, 25], [16, 4], [4, 14] ];
      // This is a box containing the guild door, used
      // for removing players from it when it closes.
      plEntrance = [ 0, 3200, 3038, 3275 ];


      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

  /// TO TOWN
//      plExits = Cons([ 2, 3, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 1, 3, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 1, 4, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 1, 5, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 3, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 4, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 5, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);

      propagate;
   }

   Delete()
   {
      if ptEntrance <> $ {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }
      plLevers = $;
      if ptReactivateLevers <> $ {
         DeleteTimer(ptReactivateLevers);
         ptReactivateLevers = $;
      }

      propagate;
   }

   SomethingTryGo(what=$, row=$,  col = $)
   {
      if ((row = 12) OR (row = 13) OR (row = 14) )
         AND ((col = 31) OR (col = 32) OR (col = 33))
      {
         Send(self,@OpenEntranceDoor);

         return TRUE;
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      //if ptEntrance = $
      //{
      //   Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=ENTRANCE_SECTOR,
               #animation=ANIMATE_FLOOR_LIFT,
               #height=ENTRANCE_H_DN,#speed=50);
      //}

      return;
   }

   CloseEntranceDoor()
   {
      Send(self,@SetSector,#sector=ENTRANCE_SECTOR,
            #animation=ANIMATE_FLOOR_LIFT,
            #height=ENTRANCE_H_UP,#speed=120);
      Send(self,@CloseEntranceDoorSound);

      // We now propagate this to handle removing players from the door,
      // and so the door can still be entered while it is closing.
      propagate;
   }

   CreateStandardObjects()
   {
      local oLever;

      // Create ornamental items.
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_SACRIFICIALBOWL),
            #new_row=4,#new_col=14,
            #fine_row=0,#fine_col=0,
            #angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_SKULL10),
            #new_row=4,#new_col=15,
            #fine_row=0,#fine_col=0,
            #angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_SACRIFICIALBOWL),
            #new_row=4,#new_col=13,
            #fine_row=0,#fine_col=0,
            #angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_GOATHEAD),
            #new_row=6,#new_col=42,
            #fine_row=8,#fine_col=8,
            #new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_GOATHEAD),
            #new_row=20,#new_col=42,
            #fine_row=48,#fine_col=48,
            #new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_GOATHEAD),
            #new_row=3,#new_col=10,
            #fine_row=16,#fine_col=24,
            #new_angle=ANGLE_SOUTH_EAST);
      Send(self,@NewHold,#what=Create(&GoadsAnvil),
            #new_row=13,#new_col=14,#new_angle=ANGLE_NORTH);
      
      // Create either lich body or lich herself.
      Send(self,@NewHold,#what=Create(&DeadLich),
            #new_row=13,#new_col=49,
            #fine_row=16,#fine_col=00,
            #new_angle=ANGLE_WEST);

      // Create the levers.
      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=22,#new_col=11,
            #fine_row=48,#fine_col=55,
            #new_angle=ANGLE_EAST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=23,#new_col=11,
            #fine_row=32,#fine_col=55,
            #new_angle=ANGLE_EAST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=24,#new_col=11,
            #fine_row=16,#fine_col=55,
            #new_angle=ANGLE_EAST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=25,#new_col=13,
            #fine_row=55,#fine_col=16,
            #new_angle=ANGLE_NORTH);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=25,#new_col=14,
            #fine_row=55,#fine_col=00,
            #new_angle=ANGLE_NORTH);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=25,#new_col=14,
            #fine_row=55,#fine_col=48,
            #new_angle=ANGLE_NORTH);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=25,#new_col=15,
            #fine_row=55,#fine_col=32,
            #new_angle=ANGLE_NORTH);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=24,#new_col=16,
            #fine_row=16,#fine_col=55,
            #new_angle=ANGLE_WEST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=23,#new_col=16,
            #fine_row=32,#fine_col=55,
            #new_angle=ANGLE_WEST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=22,#new_col=16,
            #fine_row=48,#fine_col=55,
            #new_angle=ANGLE_WEST);

      propagate;
   }

////////////////////////////
// Maze control lever code //
////////////////////////////
//
   SomethingChanged(what=$)
   {
      local oLever, i;

      if IsClass(what,&Lever)
      {
         foreach oLever in plLevers
         {
            if what = oLever
            {
               Send(Send(SYS,@FindRoomByNum,#num=RID_LICH_MAZE),@LeverPulled,
                     #num=FindListElem(plLevers,oLever));
               foreach i in plLevers
               {
                  Send(i,@SetStuck,#newStuck=TRUE);
               }
               ptReactivateLevers =
                     CreateTimer(self,@ReactivateLevers,LEVER_REACTIVATE_DELAY);
            }
         }
      }

      propagate;
   }

   ReactivateLevers()
   {
      local i;
      ptReactivateLevers = $;

      foreach i in plLevers
      {
         Send(i,@SetStuck,#newStuck=FALSE);
      }

      return;
   }

   GetPurchaseValue(who=$)
   "This returns the value that the GuildCreator will sell the guild to."
   "When the guild has been conquered, he will only sell the guild hall to "
   "someone in the Conquering guild."
   "return -1 if this player cannot rent this guild hall."
   {
      return -1;   /// A player can never normally rent this guild hall.
   }

   GetRegion()
   {
      return RID_BRAX;
   }

end
////////////////////////////////////////////////////////////////////////////////
