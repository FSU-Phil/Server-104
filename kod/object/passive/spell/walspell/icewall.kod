// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
IceWall is WallSpell

constants:
   include blakston.khd

resources:

   IceWall_name_rsc = "icewall"
   IceWall_icon_rsc = iwallice.bgf
   IceWall_desc_rsc = \
      "Creates a wall of ice in front of the caster. "
      "Requires blue mushrooms and firesand to cast."

   IceWall_cast_rsc = "Chilling spikes of ice appear before you!"
   IceWall_sound = faren.ogg

classvars:

   vrName = IceWall_name_rsc
   vrIcon = IceWall_icon_rsc
   vrDesc = IceWall_desc_rsc

   viSpell_num = SID_ICEWALL
   viSchool = SS_FAREN
   viSpell_level = 4
   viMana = 15
   viSpellExertion = 3
   viMeditate_ratio = 40

   viChance_To_Increase = 30
   viCast_time = 1000
   vrSucceed_wav = IceWall_sound
   vrSuccess = IceWall_cast_rsc

   viHarmful = TRUE

   viNumElements = 9

properties:


messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&BlueMushroom,3],plReagents);
      plReagents = Cons([&Firesand,2], plReagents);

      return;
   }

   PlaceWallElements(who = $, iSpellPower = 0)
   {
      local oRoom, iRow, iCol, iFine_Row, iFine_Col, iXStep, iYStep,
            iAngle, iMaxDamage, iDuration, iHalfrow, iHalfCol, iHalfFine_Row,
            iHalfFine_Col, oElement;

      iAngle = Send(who,@GetAngle);
      iMaxDamage = iSpellPower / 4;
      iMaxDamage = Bound(iMaxDamage,1,25);
      iDuration = (iSpellPower * 2) + 20;
      iDuration = Bound(iDuration,20,120);

      // Facing East
      if iAngle >= ANGLE_ENE OR iAngle < ANGLE_ESE
      {
         iRow = Send(who,@GetRow) - 2;
         iCol = Send(who,@GetCol) + 1;
         iXStep = 0;
         iyStep = 1;
      }

      // Facing SouthEast
      if iAngle >= ANGLE_ESE AND iAngle < ANGLE_SSE
      {
         iRow = Send(who,@GetRow) - 1;
         iCol = Send(who,@GetCol) + 3;
         iXStep = -1;
         iyStep = 1;
      }

      // Facing South
      if iAngle >= ANGLE_SSE AND iAngle < ANGLE_SSW
      {
         iRow = Send(who,@GetRow) + 1;
         iCol = Send(who,@GetCol) - 2;
         iXStep = 1;
         iyStep = 0;
      }

      // Facing SouthWest
      if iAngle >= ANGLE_SSW AND iAngle < ANGLE_WSW
      {
         iRow = Send(who,@GetRow) + 3;
         iCol = Send(who,@GetCol) + 1;
         iXStep = -1;
         iyStep = -1;
      }

      // Facing West
      if iAngle >= ANGLE_WSW AND iAngle < ANGLE_WNW
      {
         iRow = Send(who,@GetRow) - 2;
         iCol = Send(who,@GetCol) - 1;
         iXStep = 0;
         iYStep = 1;
      }

      // Facing NorthWest
      if iAngle >= ANGLE_WNW AND iAngle < ANGLE_NNW
      {
         iRow = Send(who,@GetRow) + 1;
         iCol = Send(who,@GetCol) - 3;
         iXStep = 1;
         iyStep = -1;
      }

      // Facing North
      if iAngle >= ANGLE_NNW AND iAngle < ANGLE_NNE
      {
         iRow = Send(who,@GetRow) - 1;
         iCol = Send(who,@GetCol) - 2;
         iXStep = 1;
         iyStep = 0;
      }

      // Facing NorthEast
      if iAngle >= ANGLE_NNE and iAngle < ANGLE_ENE
      {
         iRow = Send(who,@GetRow) - 3;
         iCol = Send(who,@GetCol) - 1;
         iXStep = 1;
         iyStep = 1;
      }

      oRoom = Send(who,@GetOwner);

      iFine_Row = Send(who,@GetFineRow);
      iFine_Col = Send(who,@GetFineCol);

      iHalfRow = 0;
      iHalfCol = 0;
      iHalfFine_Row = iFine_Row;
      iHalfFine_Col = iFine_Col;

      if iYStep < 0 
      {
         if iHalfFine_Row > (FINENESS_HALF - 1)
         {
            iHalfFine_Row = iHalfFine_Row - FINENESS_HALF;
         }
         else
         {
            iHalfRow = -1;
            iHalfFine_Row = FINENESS_HALF + iHalfFine_Row;
         }
      }

      if iYStep > 0 
      {
         if iHalfFine_Row < (FINENESS_HALF + 1)
         {
            iHalfFine_Row = iHalfFine_Row + FINENESS_HALF;
         }
         else
         {
            iHalfRow = 1;
            iHalfFine_Row = iHalfFine_Row - FINENESS_HALF;
         }
      }
      if iXStep < 0 
      {
         if iHalfFine_Col > (FINENESS_HALF - 1)
         {
            iHalfFine_Col = iHalfFine_Col - FINENESS_HALF;
         }
         else
         {
            iHalfCol = -1;
            iHalfFine_Col = FINENESS_HALF + iHalfFine_Col;
         }
      }

      if iXStep > 0 
      {
         if iHalfFine_Col < (FINENESS_HALF + 1)
         {
            iHalfFine_Col = iHalfFine_Col + FINENESS_HALF;
         }
         else
         {
            iHalfCol = 1;
            iHalfFine_Col = iHalfFine_Col - FINENESS_HALF;
         }
      }

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow,#new_col=iCol,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,
                        #Caster=who,#Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+iHalfRow,#new_col=iCol+iHalfCol,
           #fine_row=iHalfFine_Row,#fine_col=iHalfFine_Col);

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+iYStep,#new_col=iCol+iXStep,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,
                        #Caster=who,#Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+iYStep+iHalfRow,#new_col=iCol+iXStep+iHalfCol,
           #fine_row=iHalfFine_Row,#fine_col=iHalfFine_Col);

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+2*iYStep,#new_col=iCol+2*iXStep,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,
                        #Caster=who,#Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+(2*iYStep)+iHalfRow,#new_col=iCol+(2*iXStep)+iHalfCol,
           #fine_row=iHalfFine_Row,#fine_col=iHalfFine_Col);

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+3*iYStep,#new_col=iCol+3*iXStep,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,
                        #Caster=who,#Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+(3*iYStep)+iHalfRow,#new_col=iCol+(3*iXStep)+iHalfCol,
           #fine_row=iHalfFine_Row,#fine_col=iHalfFine_Col);

      oElement = Create(&WallofIce,#MaxDamage=iMaxDamage,#Caster=who,
                        #Duration=iDuration);
      Send(oRoom,@NewHold,#what=oElement,
           #new_row=iRow+4*iYStep,#new_col=iCol+4*iXStep,
           #fine_row=iFine_Row,#fine_col=iFine_Col);

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
